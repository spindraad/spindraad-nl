name: 🚀 Deploy

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'

jobs:
  docker:
    name: 🐳 Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: Extract node version
        id: node-version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: ⎔ Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.node-version.outputs.NODE_VERSION }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ steps.node-version.outputs.NODE_VERSION }}-node-${{ hashFiles('package-lock.json') }}

      - name: 📥 Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        env:
          FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

      - name: 🏗️ Build
        run: npm run build

      - name: 🗑️ Prune dev dependencies
        run: npm prune --omit=dev

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com/lodybo-registry
          username: ${{ secrets.DIGITALOCEAN_REGISTRY_USER }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          logout: true

      - name: ⚗️ Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: ⚗️ Determine environment
        id: env
        run: |
          if [[ "${{ steps.version.outputs.value }}" == *-beta* ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi

      - name: ⚗️ Extract repository from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: repository
        with:
          cmd: "yq .app.image.repository values.yaml"

      - name: 🐳 Build container image
        uses: docker/build-push-action@v6
        with:
          context: .
          no-cache: true
          tags: |
            ${{ steps.repository.outputs.result }}:${{ steps.version.outputs.value }}
            ${{ steps.env.outputs.is_beta == 'false' && format('{0}:latest', steps.repository.outputs.result) || format('{0}:beta', steps.repository.outputs.result) }}
          push: true
          secrets: |
            FONT_AWESOME_TOKEN=${{ secrets.FONT_AWESOME_TOKEN }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}

  deploy:
    name: 🚀 Deploy to cluster
    runs-on: ubuntu-latest
    needs: [ docker ]

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⚗️ Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: ⚗️ Determine environment
        id: env
        ## TODO: Change cluster to production if the else clause.
        run: |
          if [[ "${{ steps.version.outputs.value }}" == *-beta* ]]; then
            echo "setting up for development"
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "cluster=spindraad-dev-cluster" >> $GITHUB_OUTPUT
          else
            echo "setting up for production"
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "cluster=spindraad-dev-cluster" >> $GITHUB_OUTPUT
          fi

      - name: ⚗️ Extract app name from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: appname
        with:
          cmd: "yq .app.name values.yaml"

      - name: ⚗️ Extract namespace from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: namespace
        with:
          cmd: "yq .app.namespace values.yaml"

      - name: 🌊 Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: 💾 Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ steps.env.outputs.cluster }}

      - name: ✏️ Update Helm Chart's appVersion
        run: sed -i "s/<VERSION>/${{ steps.version.outputs.value }}/g" Chart.yaml

      - name: 🚀 Deploy to cluster
        run: >
          helm upgrade --install
          $(echo ${{ steps.appname.outputs.result }}) .
          --set app.image.tag=$(echo ${{ steps.version.outputs.value }})
          --set environment=$(echo ${{ steps.env.outputs.environment }})
          --set secrets.sendgridApiKey=${{ secrets.SENDGRID_API_KEY }}
          --namespace=$(echo ${{ steps.namespace.outputs.result }})
          --create-namespace
