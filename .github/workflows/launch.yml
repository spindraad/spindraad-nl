name: 🚀 Launch

on:
  push:
    branches:
      - dev
      - main
  pull_request:

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}

      - name: 📥 Install deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        env:
          FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

      - name: 🏗️ Build
        run: npm run build

      - name: 📦 Archive build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            build
            public

  docker:
    name: 🐳 Docker
    runs-on: ubuntu-latest
    needs: [ build ]

    # only build/deploy main branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: ⬇️ Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}

      - name: 🗑️ Prune dev dependencies
        run: npm prune --omit=dev

      - name: List directories
        run: ls -la

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com/lodybo-registry
          username: ${{ secrets.DIGITALOCEAN_REGISTRY_USER }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          logout: true

      - name: ⚗️ Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: ⚗️ Extract repository from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: repository
        with:
          cmd: "yq .app.image.repository values.yaml"

      - name: 🐳 Build container image
        uses: docker/build-push-action@v6
        with:
          no-cache: true
          tags: |
            ${{ steps.repository.outputs.result }}:${{ steps.version.outputs.value }}
            ${{ steps.repository.outputs.result }}:latest
          push: true
          secrets: |
            FONT_AWESOME_TOKEN=${{ secrets.FONT_AWESOME_TOKEN }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
#
#  deploy:
#    name: 🚀 Deploy
#    runs-on: ubuntu-latest
#    needs: [ docker ]
#
#    # only build/deploy main branch on pushes
#    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
#
#    steps:
#      - name: ⬇️ Checkout repo
#        uses: actions/checkout@v3
#
#      - name: ⚗️ Extract version from package.json
#        uses: sergeysova/jq-action@v2
#        id: version
#        with:
#          cmd: 'jq .version package.json -r'
#
#      - name: ⚗️ Extract app name from values.yaml
#        uses: mikefarah/yq@v4.44.2
#        id: appname
#        with:
#          cmd: "yq .app.name values.yaml"
#
#      - name: ⚗️ Extract namespace from values.yaml
#        uses: mikefarah/yq@v4.44.2
#        id: namespace
#        with:
#          cmd: "yq .app.namespace values.yaml"
#
#      - name: 🌊 Install doctl
#        uses: digitalocean/action-doctl@v2
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#
#      # Save the right kubernetes context depending on the branch name
#      - name: 💾 Save DigitalOcean kubeconfig for dev environment
#        if: github.ref == 'refs/heads/dev'
#        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 spindraad-dev-cluster
#
#      # Save the right kubernetes context depending on the branch name
#      - name: 💾 Save DigitalOcean kubeconfig for production environment
#        if: github.ref == 'refs/heads/main'
#        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 spindraad-app-cluster
#
#      - name: ✏️ Update Helm Chart's appVersion
#        run: sed -i "s/<VERSION>/${{ steps.version.outputs.value }}/g" Chart.yaml
#
#      - name: 🚀 Deploy to cluster
#        run: >
#          helm upgrade --install
#          $(echo ${{ steps.appname.outputs.result }}) .
#          --set app.image.tag=$(echo ${{ steps.version.outputs.value }})
#          --set secrets.sendgridApiKey=${{ secrets.SENDGRID_API_KEY }}
#          --namespace=$(echo ${{ steps.namespace.outputs.result }})
#          --create-namespace
